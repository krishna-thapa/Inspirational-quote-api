###
#  summary: Sign In API endpoint to login into the account
#  description: >
#   This can only be done by the user that have an existing account.
#  tags:
#    - AuthQueryBuild
#  parameters:
#    - name: body
#      in: body
#      required: true
#      description: Sign in form details
#      schema:
#        $ref: '#/definitions/auth.form.SignInForm'
#  responses:
#    200:
#      description: success
#    400:
#      description: Bad request (min length of password is 3 and have to be in correct email format)
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#    401:
#      description: Unauthorized with wrong password but with valid email
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#    404:
#      description: User account is not found in the database
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
###
POST        /signIn                     auth.controller.AuthController.signIn

###
#  summary: Sign up API endpoint to creater a new account
#  description: >
#   This can be done by any new user.
#  tags:
#    - AuthQueryBuild
#  parameters:
#    - name: body
#      in: body
#      required: true
#      description: Sign up form details
#      schema:
#        $ref: '#/definitions/auth.form.SignUpForm'
#  responses:
#    200:
#      description: success with id of newly created record
#      schema:
#        $ref: '#/definitions/response.OkResponse'
#    401:
#      description: Unauthorized
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#    400:
#      description: Bad request (min length of password is 3 and have to be in correct email format)
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#    406:
#      description: Account already exist in the database
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
###
POST        /signUp                     auth.controller.AuthController.signUp

###
#  summary: List all the user accounts from database
#  description: >
#   This can only be done by Admin role.
#  tags:
#    - AuthQueryBuild
#  responses:
#    200:
#      description: All the existing users
#      schema:
#        $ref: '#/definitions/auth.model.UserList'
#    401:
#      description: Unauthorized
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#    404:
#      description: Not found. Database is empty.
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#  security:
#    - TokenKey: []
###
GET        /users                      auth.controller.AuthController.getAllUser

###
#  summary: Get the selected user details
#  description: >
#   This can only be done by logged in user or Admin role.
#  tags:
#    - AuthQueryBuild
#  responses:
#    200:
#      description: success with user detail info
#      schema:
#        $ref: '#/definitions/auth.model.UserList'
#    400:
#      description: Bad request (have to be in correct email format)
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#    401:
#      description: Unauthorized
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#    404:
#      description: Not found. Database is empty.
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#  security:
#    - TokenKey: []
###
GET        /user/:email                      auth.controller.AuthController.getUserInfo(email: String)

###
#  summary: Update the user details. Different email will replace the older email
#  description: >
#   This can only be done by logged in user or Admin role.
#  tags:
#    - AuthQueryBuild
#  parameters:
#    - name: body
#      in: body
#      required: true
#      description: Update user detail form
#      schema:
#        $ref: '#/definitions/auth.form.SignUpForm'
#  responses:
#    200:
#      description: success with id of newly created record
#      schema:
#        $ref: '#/definitions/auth.model.UserList'
#    401:
#      description: Unauthorized
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#    400:
#      description: Bad request (min length of password is 3 and have to be in correct email format)
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#  security:
#    - TokenKey: []
###
POST        /user/:id                     auth.controller.AuthController.updateUserInfo(id:Int)

###
#  summary: Toggle the user account for admin role
#  description: >
#   This can only be done by Admin role.
#  tags:
#    - AuthQueryBuild
#  responses:
#    200:
#      description: success with id of toggled account
#      schema:
#        $ref: '#/definitions/response.OkResponse'
#    400:
#      description: Bad request (have to be in correct email format)
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#    401:
#      description: Unauthorized
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#    404:
#      description: Not found. Database is empty.
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#  security:
#    - TokenKey: []
###
POST     /admin/:email                    auth.controller.AuthController.toggleAdminRole(email: String)

###
#  summary: Delete the user from the database
#  description: >
#   This can only be done by Admin role.
#  tags:
#    - AuthQueryBuild
#  responses:
#    200:
#      description: success with id of deleted account
#      schema:
#        $ref: '#/definitions/response.OkResponse'
#    400:
#      description: Bad request (have to be in correct email format)
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#    401:
#      description: Unauthorized
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#    404:
#      description: Not found. Database is empty.
#      schema:
#        $ref: '#/definitions/response.ResponseErrorMsg'
#  security:
#    - TokenKey: []
###
DELETE     /user/:email                   auth.controller.AuthController.removeUser(email: String)


